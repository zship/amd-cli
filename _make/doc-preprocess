#!/usr/bin/env node


'use strict';


var repeat = require('mout/string/repeat');


var transform = function(contents) {

	// Surround --arguments in backticks, but only outside of code elements.
	// Here's a really rudimentary parser to separate code blocks/inline code
	// from regular text.
	var blocks = [];
	var capture;
	var src = contents.slice();

	// block-level
	while (src) {
		if ((capture = src.match(/\n *```[^]*\n *```/))) {
			blocks.push({
				type: 'notcode',
				text: src.slice(0, capture.index)
			});
			blocks.push({
				type: 'fence',
				text: src.slice(capture.index, capture.index + capture[0].length)
			});
			src = src.slice(capture.index + capture[0].length);
		}
		else {
			blocks.push({
				type: 'notcode',
				text: src
			});
			src = null;
		}
	}

	// inline-level
	var tokens = [];
	blocks.forEach(function(block) {
		if (block.type === 'fence') {
			tokens.push(block);
			return;
		}

		src = block.text;

		while (src) {
			if ((capture = src.match(/`[^]+?`/))) {
				tokens.push({
					type: 'notcode',
					text: src.slice(0, capture.index)
				});
				tokens.push({
					type: 'code',
					text: src.slice(capture.index, capture.index + capture[0].length)
				});
				src = src.slice(capture.index + capture[0].length);
			}
			else {
				tokens.push({
					type: 'notcode',
					text: src
				});
				src = null;
			}
		}
	});

	var rOption = /([^a-zA-Z\-])(\-\-?[a-zA-Z\(]+[a-zA-Z\-\)]*)/g;
	tokens = tokens.map(function(token) {
		if (token.type === 'code') {
			return token.text;
		}

		if (token.type === 'fence') {
			// while we're in here, transform gfm fenced code blocks to regular
			// markdown code blocks (ronn doesn't support gfm)
			return token.text.split('\n')
				.map(function(line) {
					if (line.search(/^```/) !== -1) {
						return null; //skip ``` lines
					}

					return '    ' + line;
				})
				.filter(function(line) {
					return line !== null;
				})
				.join('\n');
		}

		// perform the --arguments transform (if they're not inside a code
		// element)
		return token.text.replace(rOption, '$1`$2`');
	});

	contents = tokens.join('');

	//respect manual alignment in the SYNOPSIS
	var isSynopsis = false;
	contents = contents.split('\n')
		.map(function(line, i) {
			if (line.search(/^SYNOPSIS/) !== -1) {
				isSynopsis = true;
				return line;
			}

			if (!isSynopsis) {
				return line;
			}

			if (line.search('---') === 0) {
				return line;
			}

			if (line.search(/^\s+/) !== -1) {
				var indent = line.search(/\S/);
				var spaces = repeat('&nbsp;', indent - 2); // 2 backticks
				return line.replace(/^\s+(\S*)/, spaces + '$1') + '<br>';
			}

			if (line.search(/^[A-Z]+/) !== -1) {
				isSynopsis = false;
				return line; //new section
			}

			return line + '<br>';
		})
		.join('\n');

	return contents;

};


process.stdin.resume();
process.stdin.setEncoding('utf8');

var contents = '';

process.stdin.on('data', function(chunk) {
	contents += chunk.toString();
});

process.stdin.on('end', function() {
  process.stdout.write(transform(contents));
});
